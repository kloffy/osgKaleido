#ifndef OSGKALEIDO_POLYHEDRONGEOMETRY_INCLUDED
#define OSGKALEIDO_POLYHEDRONGEOMETRY_INCLUDED

#include <osgKaleido/Export>
#include <osgKaleido/DynamicGeometry>
#include <osgKaleido/Polyhedron>

namespace osgKaleido {

class OSGKALEIDO_EXPORT PolyhedronGeometry: public DynamicGeometry
{
public:
	enum FaceMask
	{
		None          = 0,
		Triangular    = 1 << 0,
		Quadrilateral = 1 << 1,
		Pentagonal    = 1 << 2,
		Hexagonal     = 1 << 3,
		Heptagonal    = 1 << 4,
		Octagonal     = 1 << 5,
		Nonagonal     = 1 << 6,
		Decagonal     = 1 << 7,
		Hendecagonal  = 1 << 8,
		Dodecagonal   = 1 << 9,
		All           = ~None,
	};

	static FaceMask FaceMaskFromSides(int sides);
	static int SidesFromFaceMask(FaceMask faces);

	PolyhedronGeometry();
	PolyhedronGeometry(std::string const&, FaceMask = FaceMask::All);
	PolyhedronGeometry(PolyhedronGeometry const&, osg::CopyOp const& = osg::CopyOp::SHALLOW_COPY);

	std::string const& getSymbol() const;
	void setSymbol(std::string const&);

	FaceMask getFaceMask() const;
	void setFaceMask(FaceMask = FaceMask::All);

	Polyhedron const* getOrCreatePolyhedron();

	META_Object(osgKaleido, PolyhedronGeometry);

protected:
	virtual ~PolyhedronGeometry();

	osg::Vec3Array* getOrCreateVertexArray();
	osg::Vec3Array* getOrCreateNormalArray();
	osg::Vec4Array* getOrCreateColorArray();

	virtual void updateImplementation(osg::NodeVisitor*);

private:
	std::string _symbol;
	FaceMask _faceMask;

	osg::ref_ptr<Polyhedron> _polyhedron;
};

} // osgKaleido

#endif // OSGKALEIDO_POLYHEDRONGEOMETRY_INCLUDED