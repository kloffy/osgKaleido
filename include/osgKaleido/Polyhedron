#ifndef OSGKALEIDO_POLYHEDRON_INCLUDED
#define OSGKALEIDO_POLYHEDRON_INCLUDED

#include <osgKaleido/Export>

#include <osg/Geometry>

extern "C" {

typedef struct _Polyhedron Polyhedron;

}

namespace osgKaleido {

/**
 * Polyhedron is a RAII wrapper around kaleido polyhedron data.
 */
class OSGKALEIDO_EXPORT Polyhedron: public osg::Referenced
{
public:
	Polyhedron();
	Polyhedron(std::string const&);

	std::string getName() const;
	std::string getDualName() const;
	std::string getWythoffSymbol() const;
	std::string getVertexConfiguration() const;

	std::size_t Polyhedron::getVertexCount() const;
	std::size_t Polyhedron::getFaceCount() const;
	
	bool isOneSided() const;
	bool isHemi() const;

	inline ::Polyhedron* getData() const
	{
		return _data;
	}

	inline bool getStatus() const
	{
		return _data != nullptr;
	}

protected:
	// Use reference counting.
	virtual ~Polyhedron(); 

private:
	void create();
	void destroy();

	std::string _symbol;
	::Polyhedron* _data;
};

typedef std::vector<osg::ref_ptr<osg::UShortArray>> VertexIndexArrays;

extern OSGKALEIDO_EXPORT osg::Vec3Array* createVertexArray(Polyhedron const&);
extern OSGKALEIDO_EXPORT osg::UShortArray* createVertexIndexArray(Polyhedron const&, int);
extern OSGKALEIDO_EXPORT VertexIndexArrays createVertexIndexArrays(Polyhedron const&);

/*
extern OSGKALEIDO_EXPORT void createFaces(osg::Geometry*, Polyhedron const*, Polyhedron::Faces = Polyhedron::Faces::All);
*/

} // osgKaleido

#endif // OSGKALEIDO_POLYHEDRON_INCLUDED