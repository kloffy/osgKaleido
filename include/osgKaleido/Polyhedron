#ifndef OSGKALEIDO_POLYHEDRON_INCLUDED
#define OSGKALEIDO_POLYHEDRON_INCLUDED

#include <osgKaleido/Export>

#include <osg/Geometry>

extern "C" {

typedef struct _Polyhedron Polyhedron;

}

namespace osgKaleido {

/**
 * Polyhedron is a RAII wrapper around kaleido polyhedron data.
 */
class OSGKALEIDO_EXPORT Polyhedron: public osg::Object
{
public:
	enum Faces
	{
		None          = 0,
		Triangular    = 1 << 0,
		Quadrilateral = 1 << 1,
		Pentagonal    = 1 << 2,
		Hexagonal     = 1 << 3,
		Heptagonal    = 1 << 4,
		Octagonal     = 1 << 5,
		Nonagonal     = 1 << 6,
		Decagonal     = 1 << 7,
		Hendecagonal  = 1 << 8,
		Dodecagonal   = 1 << 9,
		All           = ~None,
	};

	static Faces sidesToFace(int sides);
	static int faceToSides(Faces faces);

	Polyhedron();
	Polyhedron(std::string const&);
	Polyhedron(Polyhedron const&, osg::CopyOp const& = osg::CopyOp::SHALLOW_COPY);

	std::string const& getSymbol() const;
	void setSymbol(std::string const&);

	std::string getName() const;
	std::string getDualName() const;
	std::string getWythoffSymbol() const;
	std::string getVertexConfiguration() const;

	std::size_t Polyhedron::getVertexCount() const;
	std::size_t Polyhedron::getFaceCount() const;
	std::size_t Polyhedron::getFaceCount(Faces) const;
	
	bool isOneSided() const;
	bool isHemi() const;

	inline ::Polyhedron* getData() const
	{
		return _data;
	}

	inline bool getStatus() const
	{
		return _data != nullptr;
	}

	META_Object(osgKaleido, Polyhedron);

protected:
	// Use reference counting.
	virtual ~Polyhedron(); 

private:
	void create();
	void destroy();

	std::string _symbol;
	::Polyhedron* _data;
};

typedef std::vector<osg::ref_ptr<osg::UShortArray>> VertexIndexArrays;

extern OSGKALEIDO_EXPORT osg::Vec3Array* createVertexArray(Polyhedron const&);
extern OSGKALEIDO_EXPORT osg::UShortArray* createVertexIndexArray(Polyhedron const&, int);
extern OSGKALEIDO_EXPORT VertexIndexArrays createVertexIndexArrays(Polyhedron const&, Polyhedron::Faces = Polyhedron::Faces::All);

extern OSGKALEIDO_EXPORT osg::Geometry* createBasicGeometry(Polyhedron const&, Polyhedron::Faces = Polyhedron::Faces::All);
extern OSGKALEIDO_EXPORT osg::Geometry* createGeometry(Polyhedron const&, Polyhedron::Faces = Polyhedron::Faces::All);
/*
extern OSGKALEIDO_EXPORT void createFaces(osg::Geometry*, Polyhedron const*, Polyhedron::Faces = Polyhedron::Faces::All);
*/
} // osgKaleido

#endif // OSGKALEIDO_POLYHEDRON_INCLUDED